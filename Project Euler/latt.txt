typedef struct Node{
    int x;
    int y;
    int connected;
    int visited;
    struct Node * connections[MAX];
}Node;

typedef struct Graph{
    int length;
    int latticePaths;
    Node ** vertices;
}Graph;

Node * createnode( int x, int y ){


    Node * newnode = (Node *)malloc(sizeof(Node));
    if(newnode == NULL){
        printf("Memory allocation failed\n");
        exit(1);
    }

    //intialise
    newnode->connected = 0;
    newnode->visited = 0;
    newnode->y = y;
    newnode->x = x;

    return newnode;
}

Graph * create_graph(const int nodecount){


    Graph * newgraph = (Graph*)malloc(sizeof(Graph));
    if(newgraph == NULL){
        printf("Memory allocation failed\n");
        exit(1);
    }
    //assert(newgraph);

    newgraph->length = 0;
    newgraph->latticePaths =0;

    //allocate memory for a matrix containing all nodes of the graph
    newgraph->vertices = (Node **)malloc(sizeof(Node*) * nodecount);
    if(newgraph->vertices == NULL){
        printf("Memory allocation failed\n");
        exit(1);
    }

    return newgraph;

}

void free_graph(Graph * objects){


    //free nodes first
    for(int i =0; i < objects->length; i++){
        free(objects->vertices[i]);
    }

    free(objects->vertices);
    free(objects);

}

void connect_nodes( Node * node1, Node * node2){

    //connect node1 to node2
    node1->connections[node1->connected] = node2;
    (node1->connected)++;

    //connect node2 to node1
    node2->connections[node2->connected] = node1;
    (node2->connected)++;


}


void add_to_graph(Graph * graph, Node * node){

    //add node to array containing all nodes
    graph->vertices[graph->length] = node;
    (graph->length)++;
}

Node * find_node(Graph * objects, int x_cord, int y_cord){

    //loop through all objects in the graph until the node is found
    for(int i=0; i<objects->length; i++){
        if(objects->vertices[i]->x == x_cord && objects->vertices[i]->y == y_cord){
            return objects->vertices[i];
        }

    }

    // printf("FAILED TO FIND NODE\n");
    // exit(1);
    return NULL;
    
}

void connect_graph_nodes(Graph * objects,int n){

        for(int y=0; y < n; y++){
            for(int x=0; x < n; x++){

                Node * temp = createnode(x,y);

                add_to_graph(objects, temp);

                if(y > 0){
                    Node * temp2 = find_node(objects, x, y-1);
                    connect_nodes(temp, temp2);
                }
                if( x > 0){
                    Node * temp3 = find_node(objects, x-1, y);
                    connect_nodes(temp, temp3);

                }




            }
        }


}

